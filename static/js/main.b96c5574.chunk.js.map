{"version":3,"sources":["component/search_bar.js","component/video_list_item.js","component/video_list.js","component/video_detail.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","e","onSearchTermChange","target","value","setState","_this2","react_default","a","createElement","className","onChange","event","handle","React","Component","VideoListItem","_ref","video","onVideoSelect","imageURL","snippet","thumbnails","default","url","onClick","src","title","VideoList","videoItems","videos","map","video_list_item","key","etag","VideoDetail","videoId","id","concat","description","Boolean","window","location","hostname","match","App","selectedVideo","videoSearch","console","log","name","YTsearch","_this3","_","debounce","search_bar","video_detail","video_list","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b96c5574.chunk.js","sourcesContent":["import React ,{Component} from 'react';\r\nclass SearchBar extends React.Component{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={term:''}\r\n    }\r\n    handle(e)\r\n    {\r\n       \r\n        this.props.onSearchTermChange(e.target.value);\r\n        this.setState({term:e.target.value});\r\n    }\r\n    render()\r\n    {\r\n        return <div className='search-bar' ><input onChange={event=>this.handle(event)}/></div>\r\n\r\n    }\r\n}\r\nexport default SearchBar;","import React from 'react';\r\nconst VideoListItem =({video,onVideoSelect})=>{\r\n    const imageURL=video.snippet.thumbnails.default.url;\r\n    \r\n   return (<li onClick={()=>onVideoSelect(video)} className='list-group-item'>\r\n        <div className='video-list media'>\r\n      <div className='media-left'>\r\n            <img className='media-object' src={imageURL} />\r\n      </div>\r\n    <div className='media-body'>\r\n            <div  className='media-heading'>{video.snippet.title}</div>\r\n    </div>\r\n  </div>\r\n   \r\n   </li>) ;\r\n}\r\nexport default VideoListItem;","import React from 'react';\r\nimport VideoListItem from './video_list_item';\r\nconst VideoList=(props)=>\r\n{\r\n   const videoItems= props.videos.map((video)=>{\r\n        return <VideoListItem key={video.etag} onVideoSelect={props.onVideoSelect}  video={video} />\r\n    });\r\n    return (\r\n        <ul className='col-md-4 list-group'>\r\n            {videoItems}\r\n        </ul>\r\n    );\r\n};\r\nexport default VideoList; ","import React from 'react';\r\nconst VideoDetail=({video})=>{\r\n    if(!video)\r\n    return <div>Loading......</div>\r\n    const videoId=video.id.videoId;\r\n    const url=`https://www.youtube.com/embed/${videoId}`;\r\n    return (\r\n        <div className='video-detail col-md-8'>\r\n            <div className='embed-responsive embed-responsive-16by9'>\r\n                <iframe className='embed-responsive-item' src={url}></iframe>\r\n            </div>\r\n            <div className='details'>\r\n                <div>{video.snippet.title}</div>\r\n                <div>{video.snippet.description}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default VideoDetail;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SearchBar from './component/search_bar';\nimport YTsearch from 'youtube-api-search';\nimport VideoList from './component/video_list';\nimport VideoDetail from './component/video_detail'\nimport * as serviceWorker from './serviceWorker';\nimport _ from 'lodash';\n\nconst API_KEY='AIzaSyANbj86Ny-CxZIMSIpr4kzsp7qMvv9CTNM';\nclass App extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.state={\n            videos:[],\n            selectedVideo:null\n        }\n       this.videoSearch('surfboards');\n       \n       console.log(this.props.name);\n    }\n    videoSearch(term)\n    {\n        \n        YTsearch({key:API_KEY,term:term},(videos)=>{this.setState({videos:videos,selectedVideo:videos[0]});});\n    }\n    render()\n    {\n        //\n        const videoSearch=_.debounce((term)=>this.videoSearch(term),300);\n        return (<div>\n            <SearchBar onSearchTermChange={videoSearch}></SearchBar>\n            <VideoDetail video={this.state.selectedVideo}/>\n            <VideoList onVideoSelect={(selectedVideo)=>this.setState({selectedVideo:selectedVideo})} videos={this.state.videos}/>\n            </div>)\n    }\n}\n\nReactDOM.render(<App name='abc' />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}